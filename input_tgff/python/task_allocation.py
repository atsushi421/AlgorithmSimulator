#受け取ったタスクの前任タスクがすべて実行済みだったら、1を返す。そうでなければ0を返す。
def legal(executed_tasks, pred, num_t):
    for pred_t in pred[num_t]:
        if(pred_t not in executed_tasks):
            return False
    
    return True


#スケジューリングリストを受け取って、メイクスパンを計算する。クラスタの数と1クラスタ何コアで構成されているかは指定できる。割り当ての結果も返す。
#sはクラスタ数、kは1クラスタを構成するコア数、slはスケジューリングリスト
def culc_makespan(num_of_node, node, edge, pred, succ, s, k, sl):
    
    #↓初期設定----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    NUM_OF_CCs = s  #クラスタ数
    NUM_OF_CORES = k  #1クラスタを構成するコア数
    
    executed_tasks = []  #実行済みのタスクの集合
    
    result = [[0, 0, 0, 0, 0] for i in range(len(sl))]  #スケジューリング結果。[タスク番号, どのクラスタ, どのコア, 割り当てられた時間, 実行終了時間]
    
    #↓割り当てる対象のコア構成をつくる----------------------------------------------------------------------------------------------------------------------------------------------------
    target = [[0, 0, -1, 0] for i in range(NUM_OF_CCs * NUM_OF_CORES)]  #割り当てる対象のコア構成を示す配列。[どのクラスタに属しているか, 何番目のコアか, 実行中のタスク(-1ならそのコアはアイドル状態), 実行中のタスクの残り実行時間]
    
    n = 0  #どのクラスタか
    for i in range(len(target)):
        if(i != 0 and i % NUM_OF_CORES == 0):
            n += 1
            
        target[i][0] = n
    
    m = 0  #何番目のコアか
    for i in range(len(target)):
        target[i][1] = m
        m = (m + 1) % NUM_OF_CORES
    #↑----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    #↑-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    
    #↓タスク割り当て-------------------------------------------------------------------------------------------------------------------------------------------------------
    #1秒毎にループを回す。sが現在の時間を表す。
    #for s in range(100000000000000000000000):
        
        
    
    #↑--------------------------------------------------------------------------------------------------------------------------------------------------------------------
    
    return result

    
    